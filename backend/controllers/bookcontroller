const Book = require('../models/bookmodel')
const mongoose = require('mongoose')

//create new book
const createBook = async (req, res) => {
    const { title, author, description, price, imagePath } = req.body
    try {
        const book = await Book.create({ title, author, description, price, imagePath })
        res.status(200).json(book)
    } catch (error) {
        res.status(404).json({ error: error.message })

    }
}

//get all book
const getBooks = async (req, res) => {
    const books = await Book.find({}).sort({ createdAt: -1 })
    res.status(200).json(books)
}

//get a single book
const getBook = async (req, res) => {
    const { id } = req.params
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ error: 'no such book' })
    }
    const book = await Book.findById(id)
    if (!book) {
        return res.status(400).json({ error: 'no such book' })
    }
    res.status(200).json(book)
}

//delete a book
const deleteBook = async (req, res) => {
    const { id } = req.params
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ error: 'no such book' })
    }
    const book = await Book.findOneAndDelete({ _id: id })
    if (!book) {
        return res.status(400).json({ error: 'no such book' })
    }
    res.status(200).json(book)
}

//update a book
const updateBook = async (req, res) => {
    try {
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: 'Invalid book ID' });
        }

        const book = await Book.findOneAndUpdate(
            { _id: id },
            { ...req.body },
            { new: true }
        );

        if (!book) {
            return res.status(404).json({ error: 'Book not found' });
        }

        res.status(200).json(book);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'An error occurred while updating the book' });
    }
};

const getBookbyTitle = async (req, res) => {
    const { title } = req.params

    const book = await Book.findOne({ title: title })
    if (!book) {
        return res.status(400).json({ error: 'no such book' })
    }
    res.status(200).json(book)
}

module.exports = {
    createBook,
    getBooks,
    getBook,
    deleteBook,
    updateBook,
    getBookbyTitle
}